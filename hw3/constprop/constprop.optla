SET

DOMAIN
  ConstantLattice = flat(snum)
  ConstantFunc = VariableId -> ConstantLattice
  ConstantTuple = bool * ConstantFunc
  OpEnum = ( ADD
           , SUB
           , MUL
           , DIV
           , EQ
           , NE
           , LT
           , LE
           , AND
           , OR
           || ADD | SUB)
ENDDOMAIN

PROBLEM ConstantPropagation
  direction:  forward
  carrier:    ConstantTuple
  init_start: (true,  [-> bot])
  init:       (false, [-> top])

  equal:      constlattice_equal
  combine:    constlattice_combine
  retfunc:    constlattice_combine
  widening:   constlattice_combine

TRANSFER

ExprStatement(expr), _:
  transfer(expr, @);

ScopeStatement(WhileStmt(ExprStatement(expr))), true_edge:
  let reachable = rchbl(@);
      const_func = cfunc(@);
      value = value_of(expr, cfunc(@));
  in if is_const(value) then
    let is_true <= value;
    in (if is_true != 0 then reachable else false, const_func)
  else
    (reachable, const_func);

ScopeStatement(WhileStmt(ExprStatement(expr))), false_edge:
  @;

ScopeStatement(IfStmt(ExprStatement(expr))), true_edge:
  let reachable = rchbl(@);
      const_func = cfunc(@);
      value = value_of(expr, cfunc(@));
  in if is_const(value) then
    let is_true <= value;
    in (if is_true != 0 then reachable else false, const_func)
  else
    (reachable, const_func);

ScopeStatement(IfStmt(ExprStatement(expr))), false_edge:
  let reachable = rchbl(@);
      const_func = cfunc(@);
      value = value_of(expr, cfunc(@));
  in if is_const(value) then
    let is_true <= value;
    in (if is_true = 0 then reachable else false, const_func)
  else
    (reachable, const_func);

WhileJoin(), _: @;
IfJoin(), _: @;

DeclareStmt(var_symbol, type), _:
  let varid = varsym_varid(var_symbol);
  in if rchbl(@) then
    (true, cfunc(@) \ [ varid -> top ])
  else @;

UndeclareStmt(variables), _:
  (rchbl(@), kill_vars(variables, cfunc(@)));

LogicalIf(expr), _: @;

FunctionEntry(name), _: @;
FunctionExit(name, local_vars), _: @;

statement, _:
  println("warning: cannot handle ",
          "statement of the form: ",
          stmt_asttext(statement))
  @;

SUPPORT

is_const :: ConstantLattice -> bool;
is_const(lattice) =
  case lattice of
    bot => false;
    top => false;
    _   => true;
  endcase;

rchbl :: ConstantTuple -> bool;
rchbl((reachable, _)) = reachable;

cfunc :: ConstantTuple -> ConstantFunc;
cfunc((_, const_func)) = const_func;

kill_vars :: *VariableSymbolNT, ConstantFunc -> ConstantFunc;
kill_vars([!], const_func) = const_func;
kill_vars(var::vars, const_func) =
    let varid = varsym_varid(var);
    in  kill_vars(vars, const_func \ [ varid -> bot ]);

transfer :: Expression, ConstantTuple -> ConstantTuple;
transfer(_,    (false, const_func)) = (false, const_func);
transfer(expr, (true,  const_func)) =
  (true, 
    case expr of
      AssignOp(lhs, rhs) => const_func \ [ varref_varid(lhs) ->
                                           value_of(rhs, const_func)
                                         ];
      EqualityOp(_, _) => const_func;
      LessThanOp(_, _) => const_func;
      LessOrEqualOp(_, _) => const_func;
      _ => println("warning: unsupported expression in transfer: ",
                   expr_asttext(expr))
           const_func;
    endcase
  );

constlattice_op :: OpEnum, ConstantLattice, ConstantLattice -> ConstantLattice;
constlattice_op (op, lhs, rhs) =
  if ((op = MUL) && ((lhs = lift(0)) || (rhs = lift(0)))) then lift(0)
  else if ((op = AND) && (lhs = lift(0) || rhs = lift(0))) then lift(0)
  else if ((op = OR) && (lhs = lift(1) || rhs = lift(1))) then lift(1)
  else if ((lhs = bot) || (rhs = bot)) then bot
  else if ((lhs = top) || (rhs = top)) then top
  else if ((op = DIV) && (drop(rhs) = 0)) then bot
  else let lval <= lhs;
           rval <= rhs;
       in lift(snum_op(op, lval, rval));
       
snum_op :: OpEnum, snum, snum -> snum;
snum_op(op, lhs, rhs) =
  case op of
    ADD => lhs + rhs;
    SUB => lhs - rhs;
    MUL => lhs * rhs;
    DIV => lhs / rhs;
    EQ  => if lhs = rhs then 1 else 0;
    NE  => if lhs != rhs then 1 else 0;
    LT  => if lhs < rhs then 1 else 0;
    LE  => if lhs <= rhs then 1 else 0;
    AND => if (lhs != 0) && (rhs != 0) then 1 else 0;
    OR  => if (lhs = 0) || (rhs = 0) then 0 else 1;
    _   => println("Unsupported operation in constlattice_op")
           -1;
  endcase;

value_of :: Expression, ConstantFunc -> ConstantLattice;
value_of(expr, const_func) =
  case expr of
    ShortVal(value) => lift(val-astshort(value));
    UnsignedShortVal(value) => lift(snum(val-astushort(value)));

    IntVal(value) => lift(val-astint(value));
    UnsignedIntVal(value) => lift(snum(val-astuint(value)));

    LongIntVal(value) => lift(val-astlong(value));
    UnsignedLongVal(value) => lift(snum(val-astulong(value)));

    LongLongIntVal(value) => lift(val-astllong(value));
    UnsignedLongLongIntVal(value) => lift(snum(val-astullong(value)));

    VarRefExp(_) => const_func{!varref_varid(expr)!};
    AssignInitializer(inner_expr) => value_of(inner_expr, const_func);

    BoolValExp(value) => lift(val-astint(value));

    AddOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(ADD, lval, rval);
    SubtractOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(SUB, lval, rval);
    MultiplyOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(MUL, lval, rval);
    DivideOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(DIV, lval, rval);
    IntegerDivideOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(DIV, lval, rval);

    EqualityOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(EQ, lval, rval);
    NotEqualOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(NE, lval, rval);
    LessThanOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(LT, lval, rval);
    LessOrEqualOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(LE, lval, rval);

    AndOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(AND, lval, rval);
    OrOp(lhs, rhs) =>
      let lval = value_of(lhs, const_func);
          rval = value_of(rhs, const_func);
      in  constlattice_op(OR, lval, rval);
    NotOp(expr) => 
      let value = value_of(expr, const_func);
      in  if is_const(value) then
            if drop(value) = 0 then lift(1) else lift(0)
          else value;

    _ => println("warning: unsupported expression in value_of: ",
                 expr_asttext(expr))
         bot;
  endcase;

meet :: ConstantLattice, ConstantLattice -> ConstantLattice;
meet(lhs, rhs) = (lhs glb rhs);

constlattice_equal :: ConstantTuple, ConstantTuple -> bool;
constlattice_equal(f, g) = (f = g);

constlattice_combine :: ConstantTuple, ConstantTuple -> ConstantTuple;
constlattice_combine(f, g) =
  let f_rchbl = rchbl(f);
      g_rchbl = rchbl(g);
  in if f_rchbl && !g_rchbl then (true, cfunc(f))
     else if !f_rchbl && g_rchbl then (true, cfunc(g))
     else (rchbl(f) || rchbl(g), crunch(cfunc(f), cfunc(g), meet));

/* vim: set ts=2 sw=2: */
